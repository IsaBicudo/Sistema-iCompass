// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iCompass.Models;

#nullable disable

namespace iCompass.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20240620170034_Add-Migration CriacaoLogin -Context Contexto")]
    partial class AddMigrationCriacaoLoginContextContexto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("iCompass.Models.DadosInfluencer", b =>
                {
                    b.Property<int>("DadosInfluencerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DadosInfluencerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DadosInfluencerId"));

                    b.Property<string>("DadosInfluencerSeguidores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DadosInfluencerSeguidores");

                    b.Property<int>("TipoConteudoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoRedeSocialId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("DadosInfluencerId");

                    b.HasIndex("TipoConteudoId");

                    b.HasIndex("TipoRedeSocialId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("DadosInfluencer");
                });

            modelBuilder.Entity("iCompass.Models.Plano", b =>
                {
                    b.Property<int>("PlanoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanoId"));

                    b.Property<string>("DescricaoPlano")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DescricaoPlano");

                    b.Property<string>("NomePlano")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NomePlano");

                    b.Property<double>("ValorPlano")
                        .HasColumnType("float")
                        .HasColumnName("ValorPlano");

                    b.HasKey("PlanoId");

                    b.ToTable("Plano");
                });

            modelBuilder.Entity("iCompass.Models.Postagem", b =>
                {
                    b.Property<int>("PostagemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostagemId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostagemId"));

                    b.Property<int>("CompartilhamentoPostagem")
                        .HasColumnType("int")
                        .HasColumnName("CompartilhamentoPostagem");

                    b.Property<int>("DeslikePostagem")
                        .HasColumnType("int")
                        .HasColumnName("DeslikePostagem");

                    b.Property<int>("LikePostagem")
                        .HasColumnType("int")
                        .HasColumnName("LikePostagem");

                    b.Property<int>("QuantidadeComentariosPostagem")
                        .HasColumnType("int")
                        .HasColumnName("QuantidadeComentariosPostagem");

                    b.Property<int>("SalvosPostagem")
                        .HasColumnType("int")
                        .HasColumnName("SalvosPostagem");

                    b.Property<int>("TipoConteudoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoRedeSocialId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("PostagemId");

                    b.HasIndex("TipoConteudoId");

                    b.HasIndex("TipoRedeSocialId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Postagem");
                });

            modelBuilder.Entity("iCompass.Models.TipoConteudo", b =>
                {
                    b.Property<int>("TipoConteudoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoConteudoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoConteudoId"));

                    b.Property<string>("NomeTipoConteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NomeTipoConteudo");

                    b.Property<string>("PublicoAlvo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PublicoAlvo");

                    b.HasKey("TipoConteudoId");

                    b.ToTable("TipoConteudo");
                });

            modelBuilder.Entity("iCompass.Models.TipoRedeSocial", b =>
                {
                    b.Property<int>("TipoRedeSocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoRedeSocialId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoRedeSocialId"));

                    b.Property<string>("NomeTipoRedeSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NomeTipoRedeSocial");

                    b.HasKey("TipoRedeSocialId");

                    b.ToTable("TipoRedeSocial");
                });

            modelBuilder.Entity("iCompass.Models.TipoSexo", b =>
                {
                    b.Property<int>("TipoSexoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoSexoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoSexoId"));

                    b.Property<string>("NomeTipoSexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NomeTipoSexo");

                    b.HasKey("TipoSexoId");

                    b.ToTable("TipoSexo");
                });

            modelBuilder.Entity("iCompass.Models.TipoUsuario", b =>
                {
                    b.Property<int>("TipoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoUsuarioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoUsuarioId"));

                    b.Property<string>("NomeTipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NomeTipoUsuario");

                    b.HasKey("TipoUsuarioId");

                    b.ToTable("TipoUsuario");
                });

            modelBuilder.Entity("iCompass.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("BiografiaUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BiografiaUsuario");

                    b.Property<string>("ConfirmarSenhaUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConfirmarSenhaUsuario");

                    b.Property<int>("CpfUsuario")
                        .HasColumnType("int")
                        .HasColumnName("CpfUsuario");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailUsuario");

                    b.Property<string>("EnderecoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EnderecoUsuario");

                    b.Property<string>("FotoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FotoUsuario");

                    b.Property<int>("IdadeUsuario")
                        .HasColumnType("int")
                        .HasColumnName("IdadeUsuario");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NomeUsuario");

                    b.Property<int>("PlanoId")
                        .HasColumnType("int");

                    b.Property<string>("SenhaUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SenhaUsuario");

                    b.Property<int>("TelefoneUsuario")
                        .HasColumnType("int")
                        .HasColumnName("TelefoneUsuario");

                    b.Property<int>("TipoSexoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoUsuarioId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId");

                    b.HasIndex("PlanoId");

                    b.HasIndex("TipoSexoId");

                    b.HasIndex("TipoUsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("iCompass.Models.DadosInfluencer", b =>
                {
                    b.HasOne("iCompass.Models.TipoConteudo", "TipoConteudo")
                        .WithMany()
                        .HasForeignKey("TipoConteudoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCompass.Models.TipoRedeSocial", "TipoRedeSocial")
                        .WithMany()
                        .HasForeignKey("TipoRedeSocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCompass.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoConteudo");

                    b.Navigation("TipoRedeSocial");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("iCompass.Models.Postagem", b =>
                {
                    b.HasOne("iCompass.Models.TipoConteudo", "TipoConteudo")
                        .WithMany()
                        .HasForeignKey("TipoConteudoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCompass.Models.TipoRedeSocial", "TipoRedeSocial")
                        .WithMany()
                        .HasForeignKey("TipoRedeSocialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCompass.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoConteudo");

                    b.Navigation("TipoRedeSocial");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("iCompass.Models.Usuario", b =>
                {
                    b.HasOne("iCompass.Models.Plano", "Plano")
                        .WithMany()
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCompass.Models.TipoSexo", "TipoSexo")
                        .WithMany()
                        .HasForeignKey("TipoSexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCompass.Models.TipoUsuario", "TipoUsuario")
                        .WithMany()
                        .HasForeignKey("TipoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plano");

                    b.Navigation("TipoSexo");

                    b.Navigation("TipoUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
